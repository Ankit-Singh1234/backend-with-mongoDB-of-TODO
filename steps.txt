two line of space -> new step
npm init-y


npm install express mongoose jsonwebtoken


   create the index file  for backend ( which has 4 routes)
```
const express=require("express")

const app=express();

app.post("/signup",(req,res)=>{

})

app.post("/signin",(req,res)=>{

})

app.post("/todo",(req,res)=>{

})

app.get("/todos",(req,re)=>{

})

app.listen(3000)
```

   create the Separate    db.js   file for wrting the code realted to data and import mongoose


define the schema of User and todo
```
const mongoose=require("mongoose")
const Schema=mongoose.Schema
const ObjectId=mongoose.ObjectId

//defining the Schema of User and Todo

const User=new Schema({
    email:String,
    password:String,
    name:String
})

const Todo=new Schema({
    title:String,
    done:Boolean,
    userId:ObjectId
})
```

   create the model on which i will do to the CRUD operation ( in db.js)
```
const UserModel=mongoose.model("users",User) // users->collection name which is in Database, User->Schema
const TodoModel=mongoose.model("todos",Todo)  //todos->collection name, Todo->Schema
````


now i will expor the UserModel and TodoModel from db.js so that it is imported in the index.js file to to CRUD operation
```
const mongoose=require("mongoose")
const Schema=mongoose.Schema
const ObjectId=mongoose.ObjectId

//defining the Schema of User and Todo

const User=new Schema({
    email:String,
    password:String,
    name:String
})

const Todo=new Schema({
    title:String,
    done:Boolean,
    userId:ObjectId
})

const UserModel=mongoose.model("users",User) // users->collection name which is in Database, User->Schema
const TodoModel=mongoose.model("todos",Todo)  //todos->collection name, Todo->Schema


        now i will expor the UserModel and TodoModel from db.js so that it is imported in the index.js file to to CRUD operation

module.exports={
    UserModel:UserModel,
    TodoModel:TodoModel

}
```


import models in index.js
```
const express=require("express")
const {UserModel,TodoModel}=require("./db") //import the models fron db.js

const app=express();

app.post("/signup",(req,res)=>{

})

app.post("/signin",(req,res)=>{

})

app.post("/todo",(req,res)=>{//to create a todo in DB

})

app.get("/todos",(req,re)=>{

})

app.listen(3000)
```



________________________________
change the schema of the User
const User=new Schema({
    // email:String,
    email:{type:String, unique:true},
    password:String,
    name:String
})

____________________________________________________________
write the signup function and also change the schema of the User

app.post("/signup", async (req,res)=>{
    const email=req.body.email;
    const password=req.body.password;
    const name=req.body.name;

    await UserModel.insertMany({
        email:email,
        password:password,
        name:name

    })

    res.json({
        message:"You are logged in"
    })


})

_________________________________________________________________________________________________________________________
coneect to the DB
mongoose.connect("mongodb+srv://ankitsingh:6m6pPDY!-x3tXTp@cluster0.wqx2c.mongodb.net/todo-application-project")


_________________________________________________________________________________________________________________________
writing the code complete code for signup and signin 
const express=require("express")
const {UserModel,TodoModel}=require("./db") //import the models fron db.js
const jwt=require("jsonwebtoken")
const { default: mongoose } = require("mongoose")
const JWT_SECRET="tokenGeneratorSecret"

mongoose.connect("mongodb+srv://ankitsingh:6m6pPDY!-x3tXTp@cluster0.wqx2c.mongodb.net/todo-application-project")


const app=express();

app.use(express.json())

app.post("/signup", async (req,res)=>{
    const email=req.body.email;
    const password=req.body.password;
    const name=req.body.name;

    await UserModel.insertMany({
        email:email,
        password:password,
        name:name

    })

    res.json({
        message:"You are logged in"
    })


})

app.post("/signin",async (req,res)=>{
    const email=req.body.email;
    const password=req.body.password;

    //now check that the user credentials given is exist in database or not
    const user=await UserModel.findOne({
        email:email,
        password:password
    })

    console.log(user);

    if(user){
        //if user found then return to the token
        const token=jwt.sign({
            id:user._id
        },JWT_SECRET)

        res.json({
            token
        })
    }
    else{
        res.json({
            message:"your Credentials is Invlid"
        })
    }



})


_________________________________________________________________________________________________________________________

change the encoding/signing of the token as _id:user._id instead of id:user._id to avoid confusion bw id and _id (in my point of view) 

and als0 place .toString() after user._id.toString()  because _id is a Object and String
the toString() give the string form of the _id
 
fron line n0. 45
    if(user){
        //if user found then return to the token
        const token=jwt.sign({
            _id:user._id.toString()
        },JWT_SECRET)

        res.json({
            token
        })
    }



_________________________________________________________________________________________________________________________
code of auth

function auth(req,res,next){
    const token=req.headers.token;
    const decodedData=jwt.verify(token,JWT_SECRET);
    if(decodedData){
        req.userId=decodedData._id;
        next();
        
    }
    else{
        res.json({
            message:"You are not signed in"
        })
    }

}

_________________________________________________________________________________________________________________________

code of todo and todos endpoint

app.post("/todo",auth,async (req,res)=>{//to create a todo in DB
    const title=req.body.title;
    const done=req.body.done;
    const userId=req.userId;

    //pass the token in the header
    //pass the title and done as json in body while using with postman

    await TodoModel.create({
        title:title,
        done:done,
        userId:userId
    })

    res.json({
        message:"todo is created",
        userId
    })   

})

app.get("/todos",auth,async (req,res)=>{// to get all the todos // display all the todos
    //ge thte userId of the user data you want to see
    //it is done only when the userr in signe in , if the user is signe in then it means it has the token
    //it has the token means it has the userId
    //now find the userId and prin the related data

    const userId=req.userId;
    const todos=await TodoModel.find({userId})

    res.json({
        todos
    })   
})

_________________________________________________________________________________________________________________________
we can use .create() inplace of insertOne()

_________________________________________________________________________________________________________________________

{
  "email": "shubham@gmail.com",
  "password": "subham12a",
  "name":"Shubham_Singh"
}